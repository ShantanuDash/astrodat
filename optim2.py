# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pknloNLKD28nVhoKTqBrXF_UfLrk0iQb
"""

import pandas as pd
import numpy as np

ant1=np.loadtxt('https://github.com/ShantanuDash/astrodat/blob/main/ant1.txt?raw=True')
ant2=np.loadtxt('https://github.com/ShantanuDash/astrodat/blob/main/ant2.txt?raw=True')
t_0=np.transpose([ant1[:][0],ant2[:][0]])
phase_total=np.loadtxt('https://github.com/ShantanuDash/astrodat/blob/main/phase.txt?raw=True')[:,20:]

t_0=np.transpose(np.vstack((ant1[:,0],ant2[:,0])))

notFuncAnt=[]
for i in range(435):
  fl=0
  for j in range(8681):
    if phase_total[i,j]!=0:
      fl=1
      break
  if fl==0:
    notFuncAnt.append(i)

for i in range(phase_total.shape[0]):
  if i not in notFuncAnt:
    phase_total[i][phase_total[i]==0]=np.nan

phase=pd.DataFrame(phase_total)

phase=phase.interpolate(method='linear', limit_direction ='forward',axis=1) # easy linear interpolation

def baseline(m,n):
    if m>n:
        m,n=n,m
    return np.intersect1d(np.arange(0,435)[t_0[:,0]==m],np.arange(0,435)[t_0[:,1]==n])[0]

def cp(m,n,time,N):
    total=phase[baseline(m,n),time]
    for j in range(N):
        if(j!=m and j!=n):
            total+=(phase[baseline(j,n),time]-phase[baseline(j,m),time])
    total/=(N-1)
    return total

phase=phase.to_numpy()

cols=phase.shape[1]
p=np.zeros((30,cols))
n=6 # fixed antenna
for t in range(cols):
    for i in range(30):
      if i in [10,13,19,27]:
        continue
      m=i
      if(m!=n):
        p[i,t]=cp(m,n,t,30)

np.savetxt('closure.txt',p)

#pd.DataFrame(np.loadtxt('closure.txt'))

